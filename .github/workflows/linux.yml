name: Linux CI

on:
  push:
    branches: [iris]
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  linux_build_and_test:
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-latest
    strategy:
      matrix:
        preset: [gcc_debug_ubasan, gcc_release_dius_runtime, gcc_debug_coverage, clang_release_dius_runtime]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v26
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Store ccache cache in the GitHub actions cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.preset }}
      - name: Configure build
        run: |
          nix develop --command cmake --preset ${{ matrix.preset }} -DCMAKE_COMPILE_WARNING_AS_ERROR=On -DCMAKE_VERIFY_INTERFACE_HEADER_SETS=On
      - name: Run build
        run: |
          nix develop --command cmake --build --preset ${{ matrix.preset }}_ci
      - name: Run tests
        run: |
          nix develop --command ctest --preset ${{ matrix.preset }}
      - name: Collect code coverage information
        run: |
          nix develop --command gcovr -j ${{env.nproc}} --delete --root . --print-summary --xml-pretty --xml coverage.xml build/host/gcc/debug/coverage
        if: matrix.preset == 'gcc_debug_coverage'
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.preset == 'gcc_debug_coverage'
