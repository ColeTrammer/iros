diff --git a/Modules/CMakePlatformId.h.in b/Modules/CMakePlatformId.h.in
index 0b81c88..67045c3 100644
--- a/Modules/CMakePlatformId.h.in
+++ b/Modules/CMakePlatformId.h.in
@@ -14,6 +14,9 @@
 #elif defined(__APPLE__)
 # define PLATFORM_ID "Darwin"
 
+#elif defined(__os_2__)
+# define PLATFORM_ID "Os_2"
+
 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
 # define PLATFORM_ID "Windows"
 
diff --git a/Modules/Platform/Os_2.cmake b/Modules/Platform/Os_2.cmake
new file mode 100644
index 0000000..635f333
--- /dev/null
+++ b/Modules/Platform/Os_2.cmake
@@ -0,0 +1,14 @@
+set(CMAKE_DL_LIBS "dl")
+set(CMAKE_C_COMPILE_OPTIONS_PIC "-fPIC")
+set(CMAKE_C_COMPILE_OPTIONS_PIE "-fPIE")
+set(CMAKE_SHARED_LIBRARY_C_FLAGS "-fPIC")
+set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "-shared")
+set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
+set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "-Wl,-rpath,")
+set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP ":")
+set(CMAKE_SHARED_LIBRARY_RPATH_ORIGIN_TOKEN "\$ORIGIN")
+set(CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG "-Wl,-rpath-link,")
+set(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG "-Wl,-soname,")
+set(CMAKE_EXE_EXPORTS_C_FLAG "-Wl,--export-dynamic")
+
+include(Platform/UnixPaths)
diff --git a/Source/CTest/cmCTestTestHandler.cxx b/Source/CTest/cmCTestTestHandler.cxx
index 4d1a589..1b2479e 100644
--- a/Source/CTest/cmCTestTestHandler.cxx
+++ b/Source/CTest/cmCTestTestHandler.cxx
@@ -581,7 +581,7 @@ void cmCTestTestHandler::LogTestSummary(const std::vector<std::string>& passed,
   }
   cmCTestLog(this->CTest, HANDLER_OUTPUT,
              std::endl
-               << passColorCode << std::lround(percent) << "% tests passed"
+               << passColorCode << roundf(percent) << "% tests passed"
                << this->CTest->GetColorCode(cmCTest::Color::CLEAR_COLOR)
                << ", " << failedColorCode << failed.size() << " tests failed"
                << this->CTest->GetColorCode(cmCTest::Color::CLEAR_COLOR)
diff --git a/Source/cmCMakePath.cxx b/Source/cmCMakePath.cxx
index b8215df..2dd5324 100644
--- a/Source/cmCMakePath.cxx
+++ b/Source/cmCMakePath.cxx
@@ -123,6 +123,7 @@ void cmCMakePath::GetNativePath(std::string& path) const
 
   path = tmp.string();
 }
+#if 0
 void cmCMakePath::GetNativePath(std::wstring& path) const
 {
   cm::filesystem::path tmp(this->Path);
@@ -144,3 +145,4 @@ void cmCMakePath::GetNativePath(std::wstring& path) const
   }
 #endif
 }
+#endif
diff --git a/Source/cmCMakePath.h b/Source/cmCMakePath.h
index 15aa30c..15fd2a8 100644
--- a/Source/cmCMakePath.h
+++ b/Source/cmCMakePath.h
@@ -296,7 +296,9 @@ public:
 
   // Observers
   std::string String() const { return this->Path.string(); }
+#if 0
   std::wstring WString() const { return this->Path.wstring(); }
+#endif
 
   string_type Native() const
   {
@@ -312,6 +314,7 @@ public:
 
     return path;
   }
+#if 0
   std::wstring NativeWString() const
   {
     std::wstring path;
@@ -319,8 +322,11 @@ public:
 
     return path;
   }
+#endif
   std::string GenericString() const { return this->Path.generic_string(); }
+#if 0
   std::wstring GenericWString() const { return this->Path.generic_wstring(); }
+#endif
 
   // Decomposition
   cmCMakePath GetRootName() const { return this->Path.root_name(); }
@@ -449,7 +455,9 @@ private:
   }
 
   void GetNativePath(std::string& path) const;
+#if 0
   void GetNativePath(std::wstring& path) const;
+#endif
 
   cm::filesystem::path Path;
 };
diff --git a/Source/cmFileCommand.cxx b/Source/cmFileCommand.cxx
index 84639a7..0b170aa 100644
--- a/Source/cmFileCommand.cxx
+++ b/Source/cmFileCommand.cxx
@@ -1500,7 +1500,7 @@ public:
     long OldPercentage = this->CurrentPercentage;
 
     if (total > 0.0) {
-      this->CurrentPercentage = std::lround(value / total * 100.0);
+      this->CurrentPercentage = roundf(value / total * 100.0);
       if (this->CurrentPercentage > 100) {
         // Avoid extra progress reports for unexpected data beyond total.
         this->CurrentPercentage = 100;
diff --git a/Tests/CMakeLib/testCMFilesystemPath.cxx b/Tests/CMakeLib/testCMFilesystemPath.cxx
index 1e84520..0eb9b97 100644
--- a/Tests/CMakeLib/testCMFilesystemPath.cxx
+++ b/Tests/CMakeLib/testCMFilesystemPath.cxx
@@ -67,6 +67,7 @@ bool testConstructors()
 #endif
   }
   {
+#if 0
     std::wstring s(L"/a/b/c");
     fs::path p1(s);
     fs::path p2(s.begin(), s.end());
@@ -76,6 +77,7 @@ bool testConstructors()
     if (p1.wstring() != s || p2.wstring() != s) {
       result = false;
     }
+#endif
 #if CM_FILESYSTEM_SOURCE_TRAITS_ITERATOR
     std::wstring s2(s);
     s2 += L'\0';
@@ -277,24 +279,28 @@ bool testObservers()
   }
   {
     std::string s("a//b//c");
+#if 0
     std::wstring ws(L"a//b//c");
+#endif
     fs::path p(s);
-    if (p.string() != s || p.wstring() != ws) {
+    if (p.string() != s/* || p.wstring() != ws */) {
       result = false;
     }
   }
   {
     std::string s("a/b/c");
+#if 0
     std::wstring ws;
     for (auto c : s) {
       ws += static_cast<std::wstring::value_type>(c);
     }
+#endif
     std::string ns(s);
     std::replace(
       ns.begin(), ns.end(), '/',
       static_cast<std::string::value_type>(fs::path::preferred_separator));
     fs::path p(ns);
-    if (p.generic_string() != s || p.generic_wstring() != ws) {
+    if (p.generic_string() != s/* || p.generic_wstring() != ws */) {
       result = false;
     }
   }
diff --git a/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp b/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp
index fc86505..e90a977 100644
--- a/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp
+++ b/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp
@@ -41,7 +41,7 @@
 #endif
 #else
 #include <cmath>
-#if !(defined(__QNXNTO__)) // QNX already defines isfinite
+#if !(defined(__QNXNTO__)) && !defined(__os_2__) // QNX already defines isfinite
 #define isfinite std::isfinite
 #endif
 #endif
diff --git a/Utilities/cmlibuv/CMakeLists.txt b/Utilities/cmlibuv/CMakeLists.txt
index 7625cf6..dbf1da9 100644
--- a/Utilities/cmlibuv/CMakeLists.txt
+++ b/Utilities/cmlibuv/CMakeLists.txt
@@ -213,6 +213,19 @@ if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
     )
 endif()
 
+if(CMAKE_SYSTEM_NAME STREQUAL "Os_2")
+  list(APPEND uv_headers
+    include/uv/posix.h
+    )
+  list(APPEND uv_sources
+    src/unix/no-fsevents.c
+    src/unix/no-proctitle.c
+    src/unix/posix-poll.c
+    src/unix/posix-hrtime.c
+    src/unix/procfs-exepath.c
+    )
+endif()
+
 if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
   list(APPEND uv_libraries
     kvm
diff --git a/Utilities/cmlibuv/include/uv/unix.h b/Utilities/cmlibuv/include/uv/unix.h
index f30562e..d81642b 100644
--- a/Utilities/cmlibuv/include/uv/unix.h
+++ b/Utilities/cmlibuv/include/uv/unix.h
@@ -76,6 +76,8 @@
 # include "posix.h"
 #elif defined(__HAIKU__)
 # include "posix.h"
+#else
+# include "posix.h"
 #endif
 
 #ifndef NI_MAXHOST
diff --git a/Utilities/cmlibuv/src/unix/fs.c b/Utilities/cmlibuv/src/unix/fs.c
index f37749c..e99bc30 100644
--- a/Utilities/cmlibuv/src/unix/fs.c
+++ b/Utilities/cmlibuv/src/unix/fs.c
@@ -79,8 +79,9 @@
     defined(__NetBSD__)
 # include <sys/param.h>
 # include <sys/mount.h>
-#elif defined(__sun) || defined(__MVS__) || defined(__NetBSD__) || defined(__HAIKU__)
-# include <sys/statvfs.h>
+#elif defined(__sun) || defined(__MVS__) || defined(__NetBSD__) ||            \
+  defined(__HAIKU__) || defined(__os_2__)
+#  include <sys/statvfs.h>
 #else
 # include <sys/statfs.h>
 #endif
@@ -639,7 +640,8 @@ static int uv__fs_closedir(uv_fs_t* req) {
 
 static int uv__fs_statfs(uv_fs_t* req) {
   uv_statfs_t* stat_fs;
-#if defined(__sun) || defined(__MVS__) || defined(__NetBSD__) || defined(__HAIKU__)
+#if defined(__sun) || defined(__MVS__) || defined(__NetBSD__) ||              \
+  defined(__HAIKU__) || defined(__os_2__)
   struct statvfs buf;
 
   if (0 != statvfs(req->path, &buf))
@@ -656,7 +658,7 @@ static int uv__fs_statfs(uv_fs_t* req) {
     return -1;
   }
 
-#if defined(__sun) || defined(__MVS__) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__HAIKU__)
+#if defined(__sun) || defined(__MVS__) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__HAIKU__) || defined(__os_2__)
   stat_fs->f_type = 0;  /* f_type is not supported. */
 #else
   stat_fs->f_type = buf.f_type;
diff --git a/Utilities/cmlibuv/src/unix/udp.c b/Utilities/cmlibuv/src/unix/udp.c
index 21b922f..955946f 100644
--- a/Utilities/cmlibuv/src/unix/udp.c
+++ b/Utilities/cmlibuv/src/unix/udp.c
@@ -853,7 +853,7 @@ static int uv__udp_set_membership6(uv_udp_t* handle,
 }
 
 
-#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__)
+#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__) && !defined(__os_2__)
 static int uv__udp_set_source_membership4(uv_udp_t* handle,
                                           const struct sockaddr_in* multicast_addr,
                                           const char* interface_addr,
@@ -1028,7 +1028,7 @@ int uv_udp_set_source_membership(uv_udp_t* handle,
                                  const char* interface_addr,
                                  const char* source_addr,
                                  uv_membership membership) {
-#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__)
+#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__) && !defined(__os_2__)
   int err;
   struct sockaddr_storage mcast_addr;
   struct sockaddr_in* mcast_addr4;
diff --git a/Utilities/std/cm/filesystem b/Utilities/std/cm/filesystem
index 6cbdea9..cde568d 100644
--- a/Utilities/std/cm/filesystem
+++ b/Utilities/std/cm/filesystem
@@ -7,6 +7,7 @@
 
 #include "cmSTL.hxx" // IWYU pragma: keep
 
+#define CMake_HAVE_CXX_FILESYSTEM
 #if defined(CMake_HAVE_CXX_FILESYSTEM)
 
 #  include <filesystem> // IWYU pragma: export
